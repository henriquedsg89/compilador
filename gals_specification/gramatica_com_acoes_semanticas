<programa> ::= programa id #01 ";" <bloco> "." ;

<bloco> ::= <dcl_const> <dcl_var> <dcl_procs> <listacomando> ;

<dcl_const> ::= const id #2 "=" <constante> #3 ";" <dcl_const> | î ;

<dcl_var> ::= var #04 <lid> #05 ":" <tipo> #06 ";" <dcl_var> | î ;

<dcl_procs> ::= <dcl_proc> ";" <dcl-procs> | î ;

<dcl_proc>::= proc id #07 <par-formais> #09 ";" <bloco> #11
 | funcao id #08 <par_formais> #09 ":" <tipo_pre_definido> #10";" <bloco> #11 ;

<par_formais> ::= "(" <mp_par> #12 <lid> #13 ":"
 <tipo_pre_definido> #14 <rep_par> ")" | î

<rep_par> ::= ";" <mp_par> #12 <lid> #13 ":" <tipo_pre_definido> #14 <rep_par> | î ;

<mp_par> ::= ref #15 | val #16 ;

<lid> ::= id #17 <rep_lid> ;

<rep_lid> ::= "," <lid> | î ;

<tipo> ::= <tipo_pre_definido>

 | cadeia "[" <constante> #18 "]"

 | vetor "[" <constante> #19 ".." <constante> #20
<dimensao2> "]" de <tipo_pre_definido> #21 ;


<dimensao2> ::= "," #22 <constante> #19 ".." <constante> #20
 | î #23;

<constante> ::= id #24 | <constante_explicita> ;

<tipo_pre_definido> ::= inteiro #25 | real #26
 | booleano #27 | caracter #28 ;

<listacomando> ::= "{" <comando> <replistacomando> "}"
<replistacomando> ::= ";" <comando> <replistacomando> | î ;

<comando> ::= id #29 <rcomid>
 | <listacomando>
 | se <expressao> #30 entao <comando>
 <senaoparte>
 | enquanto <expressao> #30 faca <comando>

 | leia "(" #31 <lid> ")"

 | escreva "(" <expressao> #32 <rep-lexpr> ")"

 | î ;
<senaoparte> ::= senao <comando> | î ;

<rcomid> ::= #33 ":=" <expressao> #34

 |"[" #35 <expressao> #36 <expressao2> #37"]"
 ":=" <expressao> #34

 | "(" #38 <expressao> #39 <rep-lexpr> ")" #40

 | î #41;

<expressao2> ::= “,” #42 <expressão> | î ;

<rep_lexpr> ::= "," <expressao> #43 <rep-lexpr> | î ;

<expressao> ::= <expsimp> #44 <resto-expressao> ;

<resto_expressao> ::= <oprel> <expsimp> #45 | î ;

<oprel> ::= "=" #46 | "<" #47 | ">" #48

 | ">=" #49 | "<=" #50 | "<>" #51 ;

<expsimp> ::= #71 <termo> #52 <repexpsimp> ;

<repexpsimp>::= <opadd> #53 <termo> #54 <repexpsimp> | î;

<opadd> ::= "+" #55 | "-" #56 | ou #57 ;

<termo> ::= <fator> #58 <reptermo> ;

<reptermo> ::= <opmult> #59 <fator> #60 <reptermo> | î ;

<opmult> ::= "*" #64 | "/" #65 | e #66 ;

<fator> ::= nao #67 <fator> #68

 | "-" #69 <fator> #70

 | "(" #71 <expressao> ")" #72
 | id #29 <rvar> #73
 | <constante_explicita> #74;  9

<rvar> ::= "(" #75 <expressao> #39 <rep-lexpr> ")" #76
 | "[" #35 <expressao> #77 <expressao2> #78 "]"
 | î #79 ;

<constante_explicita>::= num-int #80 | num-real #81
 | falso #82 | verdadeiro #83
 | literal #84 ;
