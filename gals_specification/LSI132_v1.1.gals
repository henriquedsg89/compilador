#Options
GenerateScanner = true
GenerateParser = true
Language = Java
ScannerName = Lexico
ParserName = Sintatico
SemanticName = Semantico
Package = GALS
ScannerCaseSensitive = true
ScannerTable = Compact
Input = String
Parser = LL
#RegularDefinitions
L:[a-zA-Z]
D:[0-9]
#Tokens
ID : @?{L}+{D}*((@|_|#)?({L}+|{D}*))*|@{D}+((@|_|#)?({L}+|{D}*))*
INT : {D}+(("E"|"e")(\+|\-)?{D}+)?
REAL : ({D}+|.{D}+|{D}+.{D}*)(("E"|"e")(\+|\-)?{D}+)?
LITERAL : '[^']*' | \"[^\"]*\" //falta suportar ex: 'copo d''agua' = 1 literal
 : "/*" [\000-\255]* "*/" //comentario de bloco
 : / / [^\n]* //comentario de linha

programa = ID : "programa"
var = ID : "var"
caracter = ID : "caracter"
cadeia = ID : "cadeia"
procedimento = ID : "procedimento"
inicio = ID : "inicio"
fim = ID : "fim"
inteiro = ID : "inteiro"
booleano = ID : "booleano"
funcao = ID : "funcao"
se = ID : "se"
entao = ID : "entao"
senao = ID : "senao"
leia = ID : "leia"
escreva = ID : "escreva"
ou = ID : "ou"
e = ID : "e"
nao = ID : "nao"
falso = ID : "falso"
verdadeiro = ID : "verdadeiro"
de = ID : "de"
faca = ID : "faca"
real = ID : "real"
vetor = ID : "vetor"
enquanto = ID : "enquanto"

"+"
"-"
"*"
"/"
"("
")"

 : [\s\t\n\r]*
#NonTerminals
<programa>
<bloco>
<dcl_const>
<dcl_var>
<dcl_procs>
<dcl_proc>
<par_formais>
<rep_par>
<lid>
<rep_lid>
<mp_par> 
<tipo>
<dimensao2>
<constante>    
<tipo_pre_definido>
<listacomando>
<replistacomando>
<comando>
<senaoparte>
<rcomid>
<expressao2>
<rep_lexpr> 
<expressao> 
<resto_expressao>
<oprel>
<expsimp>
<rep_expsimp>
<op_add>
<termo>
<rep_termo>
<op_mult>
<fator>
<rvar>
<constante_explicita>
#Grammar
<programa> ::= programa id  ";"  <bloco> "." ;

<bloco> ::= <dcl_const>  <dcl_var> <dcl_procs>  <listacomando> ;
 
<dcl_const> ::= const id "=" <constante>   ";"  <dcl_const> | î ;

<dcl_var> ::= var   <lid>   ":"  <tipo> ";"   <dcl_var> | î ;
 
<dcl_procs> ::= <dcl_proc> ";" <dcl_procs> | î ;

<dcl_proc> ::= proc id   <par_formais>   ";" <bloco>
	          | funcao id   <par_formais>   ":"  <tipo_pre_definido> ";"   <bloco>  ;                 

<par_formais> ::= "(" <mp_par>  <lid> ":" <tipo_pre_definido>  <rep_par>  ")"  
                           | î ;

<rep_par> ::= ";" <mp_par>   <lid> ":"  <tipo_pre_definido> <rep_par> | î ;

<lid> ::= id  <rep_lid>  ;

<rep_lid> ::= ","  <lid> | î ;

<mp_par>  ::= ref | val ;

<tipo> ::=   <tipo_pre_definido> 
             |  cadeia "[" <constante> "]"  
             |   vetor  "[" <constante>  ".."  <constante> <dimensao2> "]" de <tipo_pre_definido> ;

<dimensao2> ::= ","  <constante>  ".."  <constante>  |   î ;

<constante> ::= id  |  <constante_explicita> ;
	     
<tipo_pre_definido> ::=  inteiro | real | booleano | caracter ;

<listacomando> ::= "{"   <comando>  <replistacomando>  "}"                                
<replistacomando> ::=   ";"  <comando>  <replistacomando>  |  î ;

<comando> ::= id <rcomid>
             |  <listacomando>                                 
             | se <expressao> entao <comando> <senaoparte> 
             | enquanto <expressao> faca <comando>                               
             | leia "(" <lid> ")"                                    
             | escreva "(" <expressao> <rep_lexpr> ")"  |  î ;

<senaoparte> ::= senao  <comando>  | î ;

<rcomid> ::= ":=" <expressao> 
                   |   "[" <expressao> <expressao2> "]" ":=" <expressao> 
                   |   "(" <expressao> <rep_lexpr> ")" 
                   |   î ;

<expressao2> ::= “,”  <expressão>  |  î ;

<rep_lexpr>  ::= "," <expressao> <rep_lexpr> | î ;

<expressao>  ::= <expsimp> <resto_expressao> ;

<resto_expressao> ::= <oprel> <expsimp> | î ;

<oprel> ::= "=" | "<" | ">" | ">=" | "<=" | "<>" ;

<expsimp> ::= <termo> <rep_expsimp> ;

<rep_expsimp> ::= <op_add> <termo> <rep_expsimp> | î ;
                      
<op_add> ::= "+" | "-" | ou ;

<termo> ::= <fator> <rep_termo> ;

<rep_termo> ::= <op_mult> <fator> <rep_termo> | î ;

<op_mult> ::= "*" | "/" | e ;

<fator> ::= nao <fator> 
          
               | "-"  <fator>
    
               |  "("  <expressao> ")" 

	     | id <rvar>   

	     |  <constante_explicita> ;

<rvar> ::= "(" <expressao> <rep_lexpr> ")"  
              | "[" <expressao> <expressao2> "]"
              | î ;
  
<constante_explicita>::=   num_int  |  num_real 
                          |  falso  |  verdadeiro  |  literal ;

