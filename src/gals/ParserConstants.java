package gals;

public interface ParserConstants
{
    int START_SYMBOL = 54;

    int FIRST_NON_TERMINAL    = 54;
    int FIRST_SEMANTIC_ACTION = 88;

    int[][] PARSER_TABLE =
    {
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  1,  1,  1,  1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  2,  3,  3,  3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  4,  5,  5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  6,  6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  8,  9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, 11, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 13, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, -1, 16, -1, -1, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 17, 18, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 20, 21, 19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 22, -1, -1, -1, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 24, 25, 25, 25, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 25, 25 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 26, 27, 28, 29, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 30, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 31, -1, -1, -1, -1, -1, 32, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 33, -1, -1, -1, -1, -1, -1, -1, -1, -1, 39, -1, -1, -1, -1, 34, 39, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 35, -1, 36, -1, 37, 38, 39, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 41, -1, -1, -1, -1, -1, 41, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 40, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, 45, -1, -1, -1, -1, -1, 45, 43, -1, -1, 42, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 45, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, -1, -1, -1, 47, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 49, -1, -1, -1, -1, 48, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 50, 50, 50, 50, -1, 50, -1, -1, 50, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 50, 50, 50 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, 52, -1, -1, 51, 52, -1, 52, -1, 52, -1, -1, 51, 51, 51, 51, 51, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, -1, 52, -1, -1, 52, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 53, -1, -1, -1, -1, -1, -1, -1, 54, 55, 58, 57, 56, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 59, 59, 59, 59, -1, 59, -1, -1, 59, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 59, 59, 59 },
        { -1, -1, -1, -1, -1, 60, 60, -1, -1, -1, 61, 61, -1, -1, 61, 61, -1, 61, -1, 61, -1, -1, 61, 61, 61, 61, 61, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 61, -1, 61, -1, -1, 61, 60, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, 62, 63, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 64, -1, -1, -1, -1 },
        { -1, 65, 65, 65, 65, -1, 65, -1, -1, 65, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 65, 65, 65 },
        { -1, -1, -1, -1, -1, 67, 67, 66, 66, -1, 67, 67, -1, -1, 67, 67, -1, 67, -1, 67, -1, -1, 67, 67, 67, 67, 67, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 67, -1, 67, -1, -1, 67, 67, 66, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, 68, 69, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 70, -1, -1, -1 },
        { -1, 74, 75, 75, 75, -1, 72, -1, -1, 73, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 71, 75, 75 },
        { -1, -1, -1, -1, -1, 78, 78, 78, 78, 76, 78, 78, -1, -1, 78, 78, -1, 78, 77, 78, -1, -1, 78, 78, 78, 78, 78, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 78, -1, 78, -1, -1, 78, 78, 78, -1, -1, -1 },
        { -1, -1, 79, 80, 83, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 81, 82 }
    };

    int[][] PRODUCTIONS = 
    {
        { 28,  2, 12, 55, 14 },
        { 56, 57, 58, 69 },
        { 29,  2, 15, 67, 12, 56 },
        {  0 },
        { 30, 62, 13, 65, 12, 57 },
        {  0 },
        { 59, 12, 58 },
        {  0 },
        { 31,  2, 60, 12, 55 },
        { 32,  2, 60, 13, 68, 12, 55 },
        { 10, 64, 62, 13, 68, 61, 11 },
        {  0 },
        { 12, 64, 62, 13, 68, 61 },
        {  0 },
        {  2, 63 },
        { 16, 62 },
        {  0 },
        { 33 },
        { 34 },
        { 68 },
        { 35, 19, 67, 20 },
        { 36, 19, 67, 21, 67, 66, 20, 41, 68 },
        { 16, 67, 21, 67 },
        {  0 },
        {  2 },
        { 87 },
        { 37 },
        { 38 },
        { 39 },
        { 40 },
        { 17, 71, 70, 18 },
        { 12, 71, 70 },
        {  0 },
        {  2, 73 },
        { 69 },
        { 42, 76, 43, 71, 72 },
        { 44, 76, 45, 71 },
        { 46, 10, 62, 11 },
        { 47, 10, 76, 75, 11 },
        {  0 },
        { 48, 71 },
        {  0 },
        { 22, 76 },
        { 19, 76, 74, 20, 22, 76 },
        { 10, 76, 75, 11 },
        {  0 },
        { 16, 76 },
        {  0 },
        { 16, 76, 75 },
        {  0 },
        { 79, 77 },
        { 78, 79 },
        {  0 },
        { 15 },
        { 23 },
        { 24 },
        { 27 },
        { 26 },
        { 25 },
        { 82, 80 },
        { 81, 82, 80 },
        {  0 },
        {  6 },
        {  7 },
        { 49 },
        { 85, 83 },
        { 84, 85, 83 },
        {  0 },
        {  8 },
        {  9 },
        { 50 },
        { 51, 85 },
        {  7, 85 },
        { 10, 76, 11 },
        {  2, 86 },
        { 87 },
        { 10, 76, 75, 11 },
        { 19, 76, 74, 20 },
        {  0 },
        {  3 },
        {  4 },
        { 52 },
        { 53 },
        {  5 }
    };

    String[] PARSER_ERROR =
    {
        "",
        "Era esperado fim de programa",
        "Era esperado id",
        "Era esperado num_int",
        "Era esperado num_real",
        "Era esperado literal",
        "Era esperado \"+\"",
        "Era esperado \"-\"",
        "Era esperado \"*\"",
        "Era esperado \"/\"",
        "Era esperado \"(\"",
        "Era esperado \")\"",
        "Era esperado \";\"",
        "Era esperado \":\"",
        "Era esperado \".\"",
        "Era esperado \"=\"",
        "Era esperado \",\"",
        "Era esperado \"{\"",
        "Era esperado \"}\"",
        "Era esperado \"[\"",
        "Era esperado \"]\"",
        "Era esperado \"..\"",
        "Era esperado \":=\"",
        "Era esperado \"<\"",
        "Era esperado \">\"",
        "Era esperado \"<>\"",
        "Era esperado \"<=\"",
        "Era esperado \">=\"",
        "Era esperado programa",
        "Era esperado const",
        "Era esperado var",
        "Era esperado proc",
        "Era esperado funcao",
        "Era esperado ref",
        "Era esperado val",
        "Era esperado cadeia",
        "Era esperado vetor",
        "Era esperado inteiro",
        "Era esperado real",
        "Era esperado booleano",
        "Era esperado caracter",
        "Era esperado de",
        "Era esperado se",
        "Era esperado entao",
        "Era esperado enquanto",
        "Era esperado faca",
        "Era esperado leia",
        "Era esperado escreva",
        "Era esperado senao",
        "Era esperado ou",
        "Era esperado e",
        "Era esperado nao",
        "Era esperado falso",
        "Era esperado verdadeiro",
        "<programa> inválido",
        "<bloco> inválido",
        "<dcl_const> inválido",
        "<dcl_var> inválido",
        "<dcl_procs> inválido",
        "<dcl_proc> inválido",
        "<par_formais> inválido",
        "<rep_par> inválido",
        "<lid> inválido",
        "<rep_lid> inválido",
        "<mp_par> inválido",
        "<tipo> inválido",
        "<dimensao2> inválido",
        "<constante> inválido",
        "<tipo_pre_definido> inválido",
        "<listacomando> inválido",
        "<replistacomando> inválido",
        "<comando> inválido",
        "<senaoparte> inválido",
        "<rcomid> inválido",
        "<expressao2> inválido",
        "<rep_lexpr> inválido",
        "<expressao> inválido",
        "<resto_expressao> inválido",
        "<oprel> inválido",
        "<expsimp> inválido",
        "<rep_expsimp> inválido",
        "<op_add> inválido",
        "<termo> inválido",
        "<rep_termo> inválido",
        "<op_mult> inválido",
        "<fator> inválido",
        "<rvar> inválido",
        "<constante_explicita> inválido"
    };
}
