package gals;

public interface ParserConstants
{
    int START_SYMBOL = 54;

    int FIRST_NON_TERMINAL    = 54;
    int FIRST_SEMANTIC_ACTION = 88;

    int[][] PARSER_TABLE =
    {
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  1,  1,  1,  1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  2,  3,  3,  3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  4,  5,  5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  6,  6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  8,  9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, 11, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 13, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 16, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 18, -1, 18, -1, -1, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 20, 21, 19, 19, 19, 19, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 22, -1, -1, -1, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 24, 25, 25, 25, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 25, 25 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 26, 27, 28, 29, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 30, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 31, -1, -1, -1, -1, -1, 32, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 33, -1, -1, -1, -1, -1, -1, -1, -1, -1, 39, -1, -1, -1, -1, 34, 39, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 35, -1, 36, -1, 37, 38, 39, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 41, -1, -1, -1, -1, -1, 41, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 40, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, 45, -1, -1, -1, -1, -1, 45, 43, -1, -1, 42, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 45, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, -1, -1, -1, 47, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 49, -1, -1, -1, -1, 48, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 50, 50, 50, 50, -1, 50, -1, -1, 50, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 50, 50, 50 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, 52, -1, -1, 51, 52, -1, 52, -1, 52, -1, -1, 51, 51, 51, 51, 51, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, -1, 52, -1, -1, 52, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 53, -1, -1, -1, -1, -1, -1, -1, 54, 55, 58, 57, 56, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 59, 59, 59, 59, -1, 59, -1, -1, 59, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 59, 59, 59 },
        { -1, -1, -1, -1, -1, 60, 60, -1, -1, -1, 61, 61, -1, -1, 61, 61, -1, 61, -1, 61, -1, -1, 61, 61, 61, 61, 61, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 61, -1, 61, -1, -1, 61, 60, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, 62, 63, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 64, -1, -1, -1, -1 },
        { -1, 65, 65, 65, 65, -1, 65, -1, -1, 65, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 65, 65, 65 },
        { -1, -1, -1, -1, -1, 67, 67, 66, 66, -1, 67, 67, -1, -1, 67, 67, -1, 67, -1, 67, -1, -1, 67, 67, 67, 67, 67, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 67, -1, 67, -1, -1, 67, 67, 66, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, 68, 69, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 70, -1, -1, -1 },
        { -1, 74, 75, 75, 75, -1, 72, -1, -1, 73, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 71, 75, 75 },
        { -1, -1, -1, -1, -1, 78, 78, 78, 78, 76, 78, 78, -1, -1, 78, 78, -1, 78, 77, 78, -1, -1, 78, 78, 78, 78, 78, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 78, -1, 78, -1, -1, 78, 78, 78, -1, -1, -1 },
        { -1, -1, 79, 80, 83, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 81, 82 }
    };

    int[][] PRODUCTIONS = 
    {
        {  28,   2,  89,  12,  55,  14 },
        {  56,  57,  58,  69 },
        {  29,   2,  90,  15,  67,  91,  12,  56 },
        {   0 },
        {  30,  92,  62,  93,  13,  65,  94,  12,  57 },
        {   0 },
        {  59,  12,  58 },
        {   0 },
        {  31,   2,  95,  60,  97,  12,  55,  99 },
        {  32,   2,  96,  60,  97,  13,  68,  98,  12,  55,  99 },
        {  10,  64, 100,  62, 101,  13,  68, 102,  61,  11 },
        {   0 },
        {  12,  64, 100,  62, 101,  13,  68, 102,  61 },
        {   0 },
        {  33, 103 },
        {  34, 104 },
        {   2, 105,  63 },
        {  16,  62 },
        {   0 },
        {  68 },
        {  35,  19,  67, 106,  20 },
        {  36,  19,  67, 107,  21,  67, 108,  66,  20,  41,  68, 109 },
        {  16, 110,  67, 107,  21,  67, 108 },
        { 111 },
        {   2, 112 },
        {  87 },
        {  37, 113 },
        {  38, 114 },
        {  39, 115 },
        {  40, 116 },
        {  17,  71,  70,  18 },
        {  12,  71,  70 },
        {   0 },
        {   2, 117,  73 },
        {  69 },
        {  42,  76, 118,  43,  71,  72 },
        {  44,  76, 118,  45,  71 },
        {  46,  10, 119,  62,  11 },
        {  47,  10,  76, 120,  75,  11 },
        {   0 },
        {  48,  71 },
        {   0 },
        { 121,  22,  76, 122 },
        {  19, 123,  76, 124,  74, 125,  20,  22,  76, 122 },
        {  10, 126,  76, 127,  75,  11, 128 },
        { 129 },
        {  16, 130,  76 },
        {   0 },
        {  16,  76, 131,  75 },
        {   0 },
        {  79, 132,  77 },
        {  78,  79, 133 },
        {   0 },
        {  15, 134 },
        {  23, 135 },
        {  24, 136 },
        {  27, 137 },
        {  26, 138 },
        {  25, 139 },
        { 159,  82, 140,  80 },
        {  81, 141,  82, 142,  80 },
        {   0 },
        {   6, 143 },
        {   7, 144 },
        {  49, 145 },
        {  85, 146,  83 },
        {  84, 147,  85, 148,  83 },
        {   0 },
        {   8, 152 },
        {   9, 153 },
        {  50, 154 },
        {  51, 155,  85, 156 },
        {   7, 157,  85, 158 },
        {  10, 159,  76,  11, 160 },
        {   2, 117,  86, 161 },
        {  87, 162 },
        {  10, 163,  76, 127,  75,  11, 164 },
        {  19, 123,  76, 165,  74, 166,  20 },
        { 167 },
        {   3, 168 },
        {   4, 169 },
        {  52, 170 },
        {  53, 171 },
        {   5, 172 }
    };

    String[] PARSER_ERROR =
    {
        "",
        "Era esperado fim de programa",
        "Era esperado id",
        "Era esperado num_int",
        "Era esperado num_real",
        "Era esperado literal",
        "Era esperado \"+\"",
        "Era esperado \"-\"",
        "Era esperado \"*\"",
        "Era esperado \"/\"",
        "Era esperado \"(\"",
        "Era esperado \")\"",
        "Era esperado \";\"",
        "Era esperado \":\"",
        "Era esperado \".\"",
        "Era esperado \"=\"",
        "Era esperado \",\"",
        "Era esperado \"{\"",
        "Era esperado \"}\"",
        "Era esperado \"[\"",
        "Era esperado \"]\"",
        "Era esperado \"..\"",
        "Era esperado \":=\"",
        "Era esperado \"<\"",
        "Era esperado \">\"",
        "Era esperado \"<>\"",
        "Era esperado \"<=\"",
        "Era esperado \">=\"",
        "Era esperado programa",
        "Era esperado const",
        "Era esperado var",
        "Era esperado proc",
        "Era esperado funcao",
        "Era esperado ref",
        "Era esperado val",
        "Era esperado cadeia",
        "Era esperado vetor",
        "Era esperado inteiro",
        "Era esperado real",
        "Era esperado booleano",
        "Era esperado caracter",
        "Era esperado de",
        "Era esperado se",
        "Era esperado entao",
        "Era esperado enquanto",
        "Era esperado faca",
        "Era esperado leia",
        "Era esperado escreva",
        "Era esperado senao",
        "Era esperado ou",
        "Era esperado e",
        "Era esperado nao",
        "Era esperado falso",
        "Era esperado verdadeiro",
        "Era esperado a palavra reservada 'programa'",
        "Era esperado 'const', 'var' ou '{'",
        "Era esperado 'const'",
        "Era esperado 'var'",
        "Era esperado 'proc' ou 'funcao'",
        "Era esperado 'proc' ou 'funcao'",
        "Era esperado '('",
        "Era esperado ';'",
        "Era esperado um id",
        "Era esperado ','",
        "Era esperado 'ref' ou 'val'",
        "Era esperado 'cadeia', 'inteiro', 'real', 'booleano' ou 'caracter'",
        "Era esperado ','",
        "Era esperando um id, numero inteiro, numero real, 'falso', 'verdadeiro' ou um literal",
        "Era esperado 'inteiro', 'real', 'booleano' ou 'caracter'",
        "Era esperado '{'",
        "Era esperado ';'",
        "Era esperado um id, 'se', 'enquanto', 'leia', 'escreva' ou '{'",
        "Era esperado 'senao'",
        "Era esperado ':=', '[', '(', 'nao', '-', '(', 'id', um numero inteiro, um numero real, 'falso', 'verdadeiro', ou um literal",
        "Era esperado ','",
        "Era esperado ','",
        "Era esperado 'nao', '-', '(', um id, um numero inteiro, um numero real, 'falso', 'verdadeiro', ou um literal",
        "Era esperado '=', '<', '>', '>=', '<=' ou '<>'",
        "Era esperado '=', '<', '>', '>=', '<=' ou '<>'",
        "Era esperado 'nao', '-', '(', um id, um numero inteiro, um numero real, 'falso', 'verdadeiro', ou um literal",
        "Era esperado '+', '-' ou 'ou'",
        "Era esperado '+', '-' ou 'ou'",
        "Era esperado 'nao', '-', '(', um id, um numero inteiro, um numero real, 'falso', 'verdadeiro', ou um literal",
        "Era esperado '*', '/' ou 'e'",
        "Era esperado '*', '/' ou 'e'",
        "Era esperado 'nao', '-', '(', um id, um numero inteiro, um numero real, 'falso', 'verdadeiro' ou um literal",
        "Era esperado '(' ou '['",
        "Era esperado um numero inteiro, um numero real, 'falso', 'verdadeiro', ou um literal"
    };
}
