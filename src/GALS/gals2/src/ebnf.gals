#Options
GenerateScanner = true
GenerateParser = true
Language = Java
ScannerName = Scanner
ParserName = Parser
SemanticName = Generator
Package = gesser.gals.grammar.parser
ScannerCaseSensitive = true
ScannerTable = Full
Input = Stream
Parser = SLR
#RegularDefinitions

#Tokens
"*"
"+"
"?"
"("
")"
"|"
";"
"::="
T : \" [^\"\n\r\s\t]+ \" | [A-Za-z_]+
NT : <[A-Za-z_]+>
SA : #[0-9]+
EPSILON : î

 : [\s\t\n\r]*
#NonTerminals
<G>
<P>
<PLIST>
<PLIST_REP>
<ITEM_LIST>
<ITEM_LIST_REP>
<ITEM>
<S>
<CARD>
<X>
#Grammar
<G> ::= <P> <G> | <P> ;

<P> ::= NT #1 "::=" <PLIST> ";" #9;

<PLIST> ::= #5 <ITEM_LIST> <PLIST_REP>;
<PLIST_REP> ::= "|" #5 <ITEM_LIST> <PLIST_REP> | î ;

<ITEM_LIST> ::= <ITEM> <ITEM_LIST_REP> | EPSILON ;
<ITEM_LIST_REP> ::= <ITEM> <ITEM_LIST_REP> | î ;

<ITEM> ::= <S> <CARD> #4 | <X> <CARD> #4 ;

<CARD> ::= î | "*" | "+" | "?" ;

<S> ::= T #6 | NT #7 | SA #8  ;

<X> ::= "(" #2 <PLIST> ")" #3 ;

//  1 = Empilha  a List<ItemList> da prod e guarda o LHS
//  2 = Empilha a List<ItemList> do Complex e guarda o começo
//  3 = Seta o fim do Complex
//  4 = Seta a cardinalidade do Item
//  5 = add ItemList pra lista no topo da pilha
//  6, 7, 8 = cria T, NT, SA
//  9 = desempilha e seta o List<Item>

